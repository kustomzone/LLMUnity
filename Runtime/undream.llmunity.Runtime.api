// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace LLMUnity
{
    public delegate void Callback<T>(T message);

    public class ChatAttribute : UnityEngine.PropertyAttribute
    {
        public ChatAttribute() {}
    }

    public struct ChatMessage
    {
        public string content;
        public string role;
    }

    public struct ChatOpenAIRequest
    {
        public System.Collections.Generic.List<ChatMessage> messages;
    }

    public struct ChatOpenAIResult
    {
        public System.Collections.Generic.List<ChatOpenAIResultChoice> choices;
        public UnityEngine.Time created;
        public string id;
        public string model;
        public ChatOpenAIResultNumTokens usage;
    }

    public struct ChatOpenAIResultChoice
    {
        public ChatMessage delta;
        public string finish_reason;
        public int index;
        public ChatMessage message;
    }

    public struct ChatOpenAIResultNumTokens
    {
        public int completion_tokens;
        public int prompt_tokens;
        public int total_tokens;
    }

    public struct ChatRequest
    {
        public bool cache_prompt;
        public System.Collections.Generic.List<ChatMessage> messages;
        public int n_keep;
        public int n_predict;
        public string prompt;
        public int seed;
        public System.Collections.Generic.List<string> stop;
        public bool stream;
        public float temperature;
        public int top_k;
        public float top_p;
    }

    public struct ChatResult
    {
        public bool cache_prompt;
        public string content;
        public string generation_settings;
        public string model;
        public bool multimodal;
        public string prompt;
        public int slot_id;
        public bool stop;
        public bool stopped_eos;
        public bool stopped_limit;
        public bool stopped_word;
        public string stopping_word;
        public bool system_prompt;
        public string timings;
        public int tokens_cached;
        public int tokens_evaluated;
        public bool truncated;
    }

    public class ClientAdvancedAttribute : UnityEngine.PropertyAttribute
    {
        public ClientAdvancedAttribute() {}
    }

    public class ClientAttribute : UnityEngine.PropertyAttribute
    {
        public ClientAttribute() {}
    }

    public delegate T2 ContentCallback<T, T2>(T message);

    public delegate void EmptyCallback();

    [UnityEngine.DefaultExecutionOrder(-2)] public class LLM : LLMClient
    {
        [ModelAdvanced] public int batchSize = 512;
        [UnityEngine.HideInInspector] public static float binariesProgress = 1f;
        [ModelAdvanced] public int contextSize = 512;
        [ServerAdvanced] public bool debug;
        [Model] public string lora = @"";
        [Model] public string model = @"";
        [UnityEngine.HideInInspector] public float modelCopyProgress = 1f;
        [UnityEngine.HideInInspector] public bool modelHide = true;
        [UnityEngine.HideInInspector] public float modelProgress = 1f;
        [UnityEngine.HideInInspector] public string modelUrl = @"https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.2-GGUF/resolve/main/mistral-7b-instruct-v0.2.Q4_K_M.gguf?download=true";
        [Server] public int numGPULayers;
        [Server] public int numThreads;
        [ServerAdvanced] public int parallelPrompts;
        public System.Threading.ManualResetEvent serverStarted;
        public LLM() {}
        public void Awake();
        public void DownloadModel();
        public void OnDestroy();
        public static void SetBinariesProgress(float progress);
        public void SetLora(string path);
        public void SetModel(string path);
        public void SetModelProgress(float progress);
        public void StopProcess();
    }

    [UnityEngine.DefaultExecutionOrder(-1)] public class LLMClient : UnityEngine.MonoBehaviour
    {
        [UnityEngine.HideInInspector] public bool advancedOptions;
        [Chat] public string AIName = @"Assistant";
        [ClientAdvanced] public string host = @"localhost";
        [ModelAdvanced] public int nPredict = 256;
        [Chat] public string playerName = @"Human";
        [ServerAdvanced] public int port = 13333;
        [Chat] [UnityEngine.TextArea(5, 10)] public string prompt = @"A chat between a curious human and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the human's questions.";
        [ModelAdvanced] public int seed;
        [Server] public bool stream = true;
        [ModelAdvanced] public float temperature = 0.2f;
        [ModelAdvanced] public int topK = 40;
        [ModelAdvanced] public float topP = 0.9f;
        public LLMClient() {}
        public void Awake();
        public System.Threading.Tasks.Task Chat(string question, LLMUnity.Callback<string> callback = default(LLMUnity.Callback<string>), EmptyCallback completionCallback = default(EmptyCallback), bool addToHistory = true);
        public string ChatContent(ChatResult result);
        public string ChatOpenAIContent(ChatOpenAIResult result);
        public Ret ConvertContent<Res, Ret>(string response, LLMUnity.ContentCallback<Res, Ret> getContent = default(LLMUnity.ContentCallback<Res, Ret>));
        public ChatRequest GenerateRequest(string message, bool openAIFormat = false);
        public string MultiChatContent(MultiChatResult result);
        public string[] MultiResponse(string response);
        public System.Threading.Tasks.Task<Ret> PostRequest<Res, Ret>(string json, string endpoint, LLMUnity.ContentCallback<Res, Ret> getContent, LLMUnity.Callback<Ret> callback = default(LLMUnity.Callback<Ret>));
        public System.Threading.Tasks.Task Tokenize(string question, LLMUnity.Callback<System.Collections.Generic.List<int>> callback = default(LLMUnity.Callback<System.Collections.Generic.List<int>>));
        public System.Collections.Generic.List<int> TokenizeContent(TokenizeResult result);
        public System.Threading.Tasks.Task Warmup(EmptyCallback completionCallback = default(EmptyCallback), string question = @"hi");
    }

    public class LLMUnitySetup : UnityEngine.MonoBehaviour
    {
        public LLMUnitySetup() {}
        public static System.Threading.Tasks.Task<string> AddAsset(string assetPath, string basePath);
        public static System.Diagnostics.Process CreateProcess(string command, string commandArgs = @"", LLMUnity.Callback<string> outputCallback = default(LLMUnity.Callback<string>), LLMUnity.Callback<string> errorCallback = default(LLMUnity.Callback<string>), System.Collections.Generic.List<System.ValueTuple<string, string>> environment = default(System.Collections.Generic.List<System.ValueTuple<string, string>>), bool redirectOutput = false, bool redirectError = false);
        public static System.Threading.Tasks.Task DownloadFile(string fileUrl, string savePath, bool executable = false, LLMUnity.Callback<string> callback = default(LLMUnity.Callback<string>), LLMUnity.Callback<float> progresscallback = default(LLMUnity.Callback<float>), int chunkSize = 1048576);
        public static string RunProcess(string command, string commandArgs = @"", LLMUnity.Callback<string> outputCallback = default(LLMUnity.Callback<string>), LLMUnity.Callback<string> errorCallback = default(LLMUnity.Callback<string>));
    }

    public class ModelAdvancedAttribute : UnityEngine.PropertyAttribute
    {
        public ModelAdvancedAttribute() {}
    }

    public class ModelAttribute : UnityEngine.PropertyAttribute
    {
        public ModelAttribute() {}
    }

    public struct MultiChatResult
    {
        public System.Collections.Generic.List<ChatResult> data;
    }

    public class ServerAdvancedAttribute : UnityEngine.PropertyAttribute
    {
        public ServerAdvancedAttribute() {}
    }

    public class ServerAttribute : UnityEngine.PropertyAttribute
    {
        public ServerAttribute() {}
    }

    public struct ServerStatus
    {
        public string function;
        public string hostname;
        public string level;
        public int line;
        public string message;
        public int port;
        public System.DateTime timestamp;
    }

    public struct TokenizeRequest
    {
        public string content;
    }

    public struct TokenizeResult
    {
        public System.Collections.Generic.List<int> tokens;
    }
}
